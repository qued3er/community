放动态的网页

如何利用thymleaf进行html的标签复用？==》通过thymleaf:fragment 与thymleaf:replace

根据登陆与否 隐藏头部显示    显示用户信息

定义拦截器  实现handlerinterceptor====》还是在表现层

preHandle[controller处理之前执行 ]===》参数handler

postHandle Controller之后执行的 ===》[]

afterCompletion[模板引擎之后执行]


配置类要实现webMVCconfigurer接口  ===》注入拦截器

静态资源的请求一般不被拦截

拦截器的应用：
在请求开始时查询登录的用户
把用户的信息存到内存
模板上显示用户的数据
请求结束清理用户数据

cookie中有ticket[cookie不直接存储用户的信息 因为比较敏感]   根据ticket可以查到对应的user 让后放到内存 提供使用
[ex被模板引起拿去渲染]


拦截器的好处？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？、


修改密码自己实现

上传文件  请求:post
表单上加：enctype="multipart/from-data"
MVC 通过MultipartFile处理上传文件



在web开发中，为了实现登录权限验证，我们不可能在每个方法中都写代码去验证身份信息，
常见的是在springboot中添加一个拦截器在用户的的请求到达controller层的时候实现登录验证


Session中没去有我们的cookie


首先登陆：post提交表单，到后台的post /login请求 在/login中调用了 userservice.login 会生成ticket 放到response的cookie中，返回给客户端。
并重定向到index。
在redirect到index之前，会被拦截器拦截，此时已经有了ticket，所以去库里查并找到当前的user把它set到HostHolder中去。

在login的controller执行完毕之后，会到postHandle()方法此时会把把当前线程的ThreadLocal中去拿user放到modelAndView中，拿给
模板引擎去渲染。

redirect到index之前  没被preHandle拦截。

事务：由N步数据库操作序列组成的逻辑执行单元，这系列操作要么不执行，要么都执行。 执行半途出错就回滚。
事务的四个特性：
ACID  隔离性：并发时多线程 每个线程都执行一个事务  多线程应该是隔离 互不干扰  =====》隔离性很重啊
事务的隔离性是针对并发而言的，
常见的并发异常：
第一类丢失更新:某个事务回滚导致另外一个事务已更新的数据丢失[两个线程同时对一个数据操作  一个成功另一个却回滚]
第二类丢失更新：某个事务的提交导致另外一个事务已更新的数据丢失。
脏读：某个事务读取了另个事务未提交的数据
不可重复读：某个事务，对同一数据前后读取的数据不一致。[短时间间隔内]
幻读：某个事务前后查询到的行数不一致。

事务的隔离级别解决的程度不同：分层级解决并发异常[性能与安全的衡量]==》一般用中间两种
read uncommitted[读取未提交的数据]：没处理，上述都可能处理
read committed[读取已提交的数据]:解决了第一类，脏读。
repeatable read[重复读]：不可解决幻读。
serializable：都能解决


实现保障事务的机制：
悲观锁(数据库):
    共享锁[S锁]：一个事务加了共享锁，其他事务只能加共享锁[可读]，不能加排它锁
    排它锁[X锁]：一个事务加了共享锁，其他事物对该数据不能加锁[不可读写]
乐观锁：(自定义)
    通过版本号 时间戳等更新数据前检查版本号是否变化，如果变化就取消该次更新，否则就更新数据[CAS]

spring的事务管理：
    声明式事务[不需要写逻辑，只需要在配置文件做配置/加注解]。===》加在方法上 对整个方法加了事务
    编程式事务用TransactionTemplate管理事务，通过它执行数据库的操作。====》可只对局部加事务


ajax的异步请求：通过jquery是先发出请求，发完请求之后就可以去做其他的事情了，当该请求的response来了之后，就会调用该ajax的
回调函数来渲染页面。
